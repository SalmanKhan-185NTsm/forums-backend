generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            String         @id @default(uuid())
  username      String         @db.VarChar(250)
  email         String         @unique @db.VarChar(250)
  createdAt     DateTime       @default(now())
  lastUpdatedAt DateTime       @updatedAt
  Posts         Posts[]
  AuthProvider  AuthProvider[]
  Questions     Questions[]
  Comments      Comments[]
}

model AuthProvider {
  id             String   @id @default(uuid())
  authProvidedBy String   @db.VarChar(250)
  token          String   @db.VarChar(1000)
  createdAt      DateTime @default(now())
  lastUpdatedAt  DateTime @updatedAt
  authForUserId  Users    @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId        String
}

model Posts {
  postId         String      @id @default(uuid())
  title          String      @db.VarChar(250)
  description    String      @db.Text
  tags           Json?       @db.JsonB
  createdAt      DateTime    @default(now())
  lastUpdatedAt  DateTime    @updatedAt
  postedByUserId Users       @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId        String
  Questions      Questions[]
  Comments       Comments[]
}

model Questions {
  id            String    @id @default(uuid())
  askedByUserId Users     @relation(fields: [usersId], references: [id], onDelete: Cascade)
  usersId       String
  postId        Posts     @relation(fields: [postsPostId], references: [postId], onDelete: Cascade)
  postsPostId   String
  content       String    @db.Text
  createdAt     DateTime  @default(now())
  lastUpdatedAt DateTime  @updatedAt
  Answers       Answers[]
}

model Answers {
  id            String    @id @default(uuid())
  questionId    Questions @relation(fields: [questionsId], references: [id], onDelete: Cascade)
  questionsId   String
  content       String    @db.Text
  createdAt     DateTime  @default(now())
  lastUpdatedAt DateTime  @updatedAt
}

model Comments {
  id                String   @id @default(uuid())
  content           String   @db.Text
  commentedByUserId Users    @relation(fields: [usersId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now())
  lastUpdatedAt     DateTime @updatedAt
  usersId           String
  postId            Posts    @relation(fields: [postsPostId], references: [postId])
  postsPostId       String
}
